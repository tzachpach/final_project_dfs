# -*- coding: utf-8 -*-
"""contests_merge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LsIxHwkXYtrbYYKGdxFV-UPcjSlEA-Hm
"""

import pandas as pd
import os
import glob # Use glob for easier pattern matching of files

# --- User Configuration ---
# IMPORTANT: Replace this with the actual path to the folder containing your 163 CSV files
csv_directory = r'/Users/admin/Library/Mobile Documents/com~apple~CloudDocs/IDC MLDS MSc 2021/GPT_AI_Research/DFS/final_project_dfs/data/contests_data/dfs_contests_2022-23'

# Define the names for your output files
merged_output_file = 'dfs_contests_2022_23_merged.csv'
filtered_output_file = 'dfs_contests_2022_23_fanduel_filtered.csv'
# --- End User Configuration ---

# --- Task 1: Merge all CSV files ---

# Check if the specified directory exists
if not os.path.isdir(csv_directory):
    print(f"Error: Directory not found: {csv_directory}")
    print("Please update the 'csv_directory' variable with the correct path.")
else:
    # Construct the pattern to find all CSV files in the directory
    all_csv_files_pattern = os.path.join(csv_directory, '*.csv')

    # Get a list of all file paths that match the pattern
    all_csv_files = glob.glob(all_csv_files_pattern)

    if not all_csv_files:
        print(f"Error: No CSV files found in the directory: {csv_directory}")
    else:
        print(f"Found {len(all_csv_files)} CSV files. Starting merge...")

        # List to hold DataFrames
        df_list = []

        # Loop through the list of files and read each one into a DataFrame
        for f in all_csv_files:
            try:
                df = pd.read_csv(f)
                df_list.append(df)
                #print(f"  Read: {os.path.basename(f)}")
            except Exception as e:
                print(f"  Error reading {os.path.basename(f)}: {e}. Skipping this file.")

        if not df_list:
             print("No dataframes were successfully read. Exiting.")
        else:
            # Concatenate all DataFrames in the list vertically
            # ignore_index=True creates a new continuous index for the merged DataFrame
            merged_df = pd.concat(df_list, ignore_index=True)
            print("\nMerging complete.")
            print(f"Total rows in merged DataFrame: {len(merged_df)}")

            # Save the merged DataFrame to a new CSV file
            # index=False prevents pandas from writing the DataFrame index as a column
            try:
                merged_df.to_csv(merged_output_file, index=False)
                print(f"Merged data saved to: {merged_output_file}")

                # --- Task 2: Filter the merged data ---
                print("\nStarting filtering process...")

                # Apply filters
                # 1. Filter for 'site'
                site_filter = merged_df['site'].isin(['fanduel', 'fanduel_single', 'fanduel_super'])

                # 2. Filter for 'title'
                title_filter = merged_df['title'].isin(['Main', 'NBA - Main'])

                # 3. Filter for 'total_entrants'
                entrants_filter = merged_df['total_entrants'] >= 20

                # 4. Filter for 'cost'
                cost_filter = merged_df['cost'] >= 1

                # Combine all filters using the logical AND (&) operator
                combined_filter = site_filter & title_filter & entrants_filter & cost_filter

                # Create the filtered DataFrame
                filtered_df = merged_df[combined_filter]
                print("Filtering complete.")
                print(f"Total rows in filtered DataFrame: {len(filtered_df)}")

                # Save the filtered DataFrame to a new CSV file
                try:
                    filtered_df.to_csv(filtered_output_file, index=False)
                    print(f"Filtered data saved to: {filtered_output_file}")
                except Exception as e:
                    print(f"Error saving filtered file {filtered_output_file}: {e}")

            except Exception as e:
                print(f"Error saving merged file {merged_output_file}: {e}")